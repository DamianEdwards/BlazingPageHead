@using Microsoft.Extensions.Logging
@using System.Threading
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject ILogger<PageHeadManager> Logger
@implements IAsyncDisposable

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// The value to append to the page title.
    /// </summary>
    [Parameter]
    public string Suffix { get; set; }

    private bool _initialRenderComplete;
    private string _currentLocation;
    private IJSObjectReference _jsModule;
    private ElementReference? _headContentRef;
    private TaskQueue _pageHeadUpdatesQueue;

    protected override void OnInitialized()
    {
        Logger.LogDebug("OnInitialized");
        _pageHeadUpdatesQueue = new TaskQueue();
        _currentLocation = NavigationManager.Uri;
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogDebug("OnAfterRenderAsync(firstRender: {firstRender})", firstRender);

        EnsureJsModule();

        _initialRenderComplete = true;

        UpdatePageTitleFromLocation(_currentLocation);
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= LocationChanged;

        if (_jsModule != null)
        {
            await _jsModule.DisposeAsync();
        }
    }

    internal void ProcessHeadContent(ElementReference headContentRef)
    {
        Logger.LogDebug("Page head content being processed");

        _headContentRef = headContentRef;

        if (!_initialRenderComplete)
        {
            throw new InvalidOperationException($"{nameof(ProcessHeadContent)} called before initial rendering is complete. This should never happen and likely indicates a race condition.");
        }

        UpdatePageHeadContent();
    }

    private void LocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        Logger.LogDebug("Location change event fired");

        if (!string.Equals(_currentLocation, e.Location))
        {
            Logger.LogDebug("Location change detected. Previous location was '{previous}', new location is '{new}'", _currentLocation, e.Location);

            var currentUri = new Uri(_currentLocation);
            var newUri = new Uri(e.Location);

            if (Uri.Compare(currentUri, newUri, UriComponents.SchemeAndServer | UriComponents.Path, UriFormat.SafeUnescaped, StringComparison.OrdinalIgnoreCase) != 0)
            {
                _currentLocation = e.Location;
                Logger.LogDebug("Updating page title due to location change");
                UpdatePageTitleFromLocation(e.Location);
            }
            else
            {
                Logger.LogDebug("New location's URL server and path are the same as previous location's, skipping page title udpate");
            }
        }
    }

    private void UpdatePageTitleFromLocation(string location)
    {
        Logger.LogDebug("Updating page title from location '{location}'", location);
        var title = new Uri(location).Segments.Last() + Suffix;

        var _ = _pageHeadUpdatesQueue.Enqueue(() => _jsModule.InvokeVoidAsync("resetHead", $"{title}"));

        Logger.LogDebug("Page title updated to '{title}' via JSRuntime", title);
    }

    private async void UpdatePageHeadContent()
    {
        var title = await _pageHeadUpdatesQueue.Enqueue(() => _jsModule.InvokeAsync<string>("processHeadContent", _headContentRef.Value, Suffix));
        if (title != null)
        {
            Logger.LogDebug("Page title '{title}' was present in page head content", title);
        }
    }

    private async void EnsureJsModule()
    {
        if (_jsModule == null)
        {
            _jsModule = await _pageHeadUpdatesQueue.Enqueue(() => JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/HeadComponents/jsFunctions.js"));
        }
    }
}
